name: build and scan image (Alpine version)

on:
  push:
    branches-ignore:
      - "master"

env:
  IMAGE_NAME: "simaofsilva/noip-renewer"
  PIP_VERSION: "23.2.1" # renovate: datasource=pypi depName=pip versioning=pep440

jobs:
  build_alpine:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Checkout
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Check isort compliance
        uses: isort/isort-action@v1.1.0
        with:
          sort-paths: renew.py

      # Triggering SonarQube analysis as results of it are required by Quality Gate check
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Output from the Quality Gate
      # The possible outputs of the "quality-gate-status" variable are "PASSED", "WARN" or "FAILED"
      - name: "Example show SonarQube Quality Gate Status value"
        if: always() # Run even if Quality Gate check failed
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: Build image for tests
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ env.IMAGE_NAME }}:test-alpine
          file: Dockerfile
          build-args: |
            PIP_VERSION=${{ env.PIP_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test-alpine
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
